package org.acidRain.acidRain;

import org.bukkit.*;
import org.bukkit.command.*;
import org.bukkit.command.TabCompleter;
import org.bukkit.configuration.file.*;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.*;
import org.bukkit.plugin.java.*;
import org.bukkit.potion.*;
import org.bukkit.scheduler.*;
import org.bukkit.event.*;
import org.bukkit.event.block.Action;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.*;
import org.bukkit.block.Block;
import org.bukkit.inventory.*;
import org.bukkit.inventory.meta.*;
import org.bukkit.persistence.*;
import org.bukkit.Color;
import org.bukkit.Particle;
import org.bukkit.Sound;
import java.io.*;
import java.util.*;
import java.util.TimeZone;
import java.util.Calendar;
import java.util.Random;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

public final class AcidRain extends JavaPlugin implements Listener, CommandExecutor, TabCompleter {

    private int dangerZoneStart;
    private int zone1Radius = 300;
    private int zone2Radius = 750;
    private int zone3Radius = 1500;
    private int zone4Radius = 3000;
    private boolean acidRainEnabled;
    private boolean isExpanding;
    private FileConfiguration config;
    private File configFile;
    private final Map<UUID, Long> lastEffectTime = new HashMap<>();
    private final Map<UUID, Integer> currentZone = new HashMap<>();
    private final Map<UUID, Long> suitExpirationTimes = new HashMap<>();
    private final Map<UUID, Boolean> hasFullSuit = new HashMap<>();
    private final Map<UUID, Long> suitPauseTimes = new HashMap<>();
    private BukkitTask expansionTask;
    private BukkitTask autoExpandTask;

    @Override
    public void onEnable() {
        configFile = new File(getDataFolder(), "config.yml");
        if (!configFile.exists()) {
            saveResource("config.yml", false);
        }
        config = YamlConfiguration.loadConfiguration(configFile);
        loadConfig();
        loadProtectionTimes();
        calculateZoneRadii();

        registerCommands();
        registerRecipes();
        getServer().getPluginManager().registerEvents(this, this);
        startParticleTask();
        startAutoExpandTask();

        new BukkitRunnable() {
            @Override
            public void run() {
                updateSuitTimers();
            }
        }.runTaskTimer(this, 0L, 20L);

        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : Bukkit.getOnlinePlayers()) {
                    checkSuitAndEffects(player);
                }
            }
        }.runTaskTimer(this, 0L, 20L);

        // –ü—Ä–æ—Å—Ç–æ–π ASCII-–∞—Ä—Ç –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        getLogger().info("");
        getLogger().info("================================================================");
        getLogger().info("                    ACID RAIN SYSTEM");
        getLogger().info("================================================================");
        getLogger().info("                    Advanced Acid Rain System v1.0b");
        getLogger().info("                    –ì—Ä–∞–Ω–∏—Ü–∞: " + dangerZoneStart + " –±–ª–æ–∫–æ–≤");
        getLogger().info("                    Discord: https://discord.gg/gV2KmUbqXC");
        getLogger().info("                    –ê–≤—Ç–æ—Ä—ã: Flaim and SubTeams");
        getLogger().info("================================================================");
        getLogger().info("");
        getLogger().info("‚úÖ AcidRain —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
        getLogger().info("üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Discord: https://discord.gg/gV2KmUbqXC");
        getLogger().info("");
    }

    @Override
    public void onDisable() {
        saveProtectionTimes();
        cancelTasks();
        savePluginConfig();
        getLogger().info("");
        getLogger().info("================================================================");
        getLogger().info("                    ACID RAIN SYSTEM");
        getLogger().info("================================================================");
        getLogger().info("                    Advanced Acid Rain System v1.0b");
        getLogger().info("                              –ü–õ–ê–ì–ò–ù –í–´–ö–õ–Æ–ß–ï–ù");
        getLogger().info("                    Discord: https://discord.gg/gV2KmUbqXC");
        getLogger().info("================================================================");
        getLogger().info("");
        getLogger().info("‚ùå AcidRain –≤—ã–∫–ª—é—á–µ–Ω!");
        getLogger().info("");
    }

    private void saveProtectionTimes() {
        for (Map.Entry<UUID, Long> entry : suitExpirationTimes.entrySet()) {
            config.set("protectionTimes." + entry.getKey().toString(), entry.getValue());
        }
        try {
            config.save(configFile);
        } catch (IOException e) {
            getLogger().warning("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—â–∏—Ç—ã: " + e.getMessage());
        }
    }

    private void loadProtectionTimes() {
        ConfigurationSection section = config.getConfigurationSection("protectionTimes");
        if (section != null) {
            for (String key : section.getKeys(false)) {
                try {
                    UUID uuid = UUID.fromString(key);
                    long expireTime = section.getLong(key);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
                    if (System.currentTimeMillis() < expireTime) {
                        suitExpirationTimes.put(uuid, expireTime);
                    } else {
                        getLogger().info("–£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –∑–∞—â–∏—Ç—É –¥–ª—è –∏–≥—Ä–æ–∫–∞: " + uuid);
                    }
                } catch (IllegalArgumentException e) {
                    getLogger().warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –≤ –∫–æ–Ω—Ñ–∏–≥–µ: " + key);
                }
            }
        }
    }

    private void loadConfig() {
        dangerZoneStart = config.getInt("dangerZoneStart", 1100);
        zone1Radius = config.getInt("zones.zone1.radius", 300);
        acidRainEnabled = config.getBoolean("acidRainEnabled", true);
    }

    private void calculateZoneRadii() {
        zone2Radius = (int)(zone1Radius * 2.5);
        zone3Radius = (int)(zone1Radius * 5.0);
        zone4Radius = (int)(zone1Radius * 10.0);
    }

    private void registerCommands() {
        String[] commands = {"acidrain", "aon", "aoff", "aset", "aexpand", "astatus", "asuit", "arecipes", "atime"};
        for (String cmd : commands) {
            PluginCommand command = getCommand(cmd);
            if (command != null) {
                command.setExecutor(this);
                command.setTabCompleter(this);
            }
        }
    }

    private void registerRecipes() {
        try {
            // –†–µ—Ü–µ–ø—Ç –¥–ª—è —à–ª–µ–º–∞
            ShapedRecipe helmetRecipe = new ShapedRecipe(new NamespacedKey(this, "acidrain_helmet"),
                    createArmorPiece(Material.LEATHER_HELMET, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–π —à–ª–µ–º"));
            helmetRecipe.shape("LLL", "L L");
            helmetRecipe.setIngredient('L', Material.LEATHER);
            getServer().addRecipe(helmetRecipe);
            getLogger().info("–†–µ—Ü–µ–ø—Ç —à–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

            // –†–µ—Ü–µ–ø—Ç –¥–ª—è –∫–∏—Ä–∞—Å—ã
            ShapedRecipe chestplateRecipe = new ShapedRecipe(new NamespacedKey(this, "acidrain_chestplate"),
                    createArmorPiece(Material.LEATHER_CHESTPLATE, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∞—è –∫–∏—Ä–∞—Å–∞"));
            chestplateRecipe.shape("L L", "LLL", "LLL");
            chestplateRecipe.setIngredient('L', Material.LEATHER);
            getServer().addRecipe(chestplateRecipe);
            getLogger().info("–†–µ—Ü–µ–ø—Ç –∫–∏—Ä–∞—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

            // –†–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–Ω–æ–∂–µ–π
            ShapedRecipe leggingsRecipe = new ShapedRecipe(new NamespacedKey(this, "acidrain_leggings"),
                    createArmorPiece(Material.LEATHER_LEGGINGS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –ø–æ–Ω–æ–∂–∏"));
            leggingsRecipe.shape("LLL", "L L", "L L");
            leggingsRecipe.setIngredient('L', Material.LEATHER);
            getServer().addRecipe(leggingsRecipe);
            getLogger().info("–†–µ—Ü–µ–ø—Ç –ø–æ–Ω–æ–∂–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

            // –†–µ—Ü–µ–ø—Ç –¥–ª—è –±–æ—Ç–∏–Ω–æ–∫
            ShapedRecipe bootsRecipe = new ShapedRecipe(new NamespacedKey(this, "acidrain_boots"),
                    createArmorPiece(Material.LEATHER_BOOTS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –±–æ—Ç–∏–Ω–∫–∏"));
            bootsRecipe.shape("L L", "L L");
            bootsRecipe.setIngredient('L', Material.LEATHER);
            getServer().addRecipe(bootsRecipe);
            getLogger().info("–†–µ—Ü–µ–ø—Ç –±–æ—Ç–∏–Ω–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

            // –†–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞
            ShapedRecipe fullSuitRecipe = new ShapedRecipe(
                    new NamespacedKey(this, "acidrain_full_suit"),
                    createFullProtectionSuit()
            );

            fullSuitRecipe.shape("NBT", "VEV", "LBL");
            fullSuitRecipe.setIngredient('N', Material.NETHER_STAR);
            fullSuitRecipe.setIngredient('B', Material.BREEZE_ROD);
            fullSuitRecipe.setIngredient('T', Material.TOTEM_OF_UNDYING);
            fullSuitRecipe.setIngredient('V', Material.LEATHER_HELMET);
            fullSuitRecipe.setIngredient('E', Material.LEATHER_CHESTPLATE);
            fullSuitRecipe.setIngredient('L', Material.LEATHER_BOOTS);

            getServer().addRecipe(fullSuitRecipe);
            getLogger().info("–†–µ—Ü–µ–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
            
        } catch (Exception e) {
            getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: " + e.getMessage());
        }
    }

    private ItemStack createFullProtectionSuit() {
        ItemStack resultItem = new ItemStack(Material.NETHER_STAR);
        ItemMeta meta = resultItem.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(ChatColor.GREEN + "–ù–∞–±–æ—Ä –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∏—Å–ª–æ—Ç–Ω—ã—Ö –¥–æ–∂–¥–µ–π");

            PersistentDataContainer data = meta.getPersistentDataContainer();
            data.set(new NamespacedKey(this, "full_protection_set"), PersistentDataType.INTEGER, 1);

            List<String> lore = new ArrayList<>();
            lore.add(ChatColor.GRAY + "–ü–ö–ú - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –±—Ä–æ–Ω–∏");
            lore.add(ChatColor.GRAY + "–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∏—Å–ª–æ—Ç–Ω—ã—Ö –¥–æ–∂–¥–µ–π");
            meta.setLore(lore);

            resultItem.setItemMeta(meta);
        }
        return resultItem;
    }

    private void startParticleTask() {
        new BukkitRunnable() {
            @Override
            public void run() {
                if (!acidRainEnabled) return;

                for (Player player : Bukkit.getOnlinePlayers()) {
                    try {
                        handleParticles(player);
                    } catch (Exception e) {
                        getLogger().warning("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ " + player.getName() + ": " + e.getMessage());
                    }
                }
            }
        }.runTaskTimer(this, 0L, 20L);
    }

    private void startAutoExpandTask() {
        autoExpandTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (!config.getBoolean("autoExpand.enabled", true)) return;

                Calendar moscowTime = Calendar.getInstance(TimeZone.getTimeZone("Europe/Moscow"));
                if (moscowTime.get(Calendar.HOUR_OF_DAY) == config.getInt("autoExpand.triggerHour", 14) &&
                        moscowTime.get(Calendar.MINUTE) == 0) {

                    triggerAutoExpand();
                }
            }
        }.runTaskTimer(this, 0L, 20L * 60);
    }

    private void triggerAutoExpand() {
        Random random = new Random();
        int blocks = config.getInt("autoExpand.minBlocks", 50) +
                random.nextInt(config.getInt("autoExpand.maxBlocks", 80) -
                        config.getInt("autoExpand.minBlocks", 50) + 1);

        int seconds = config.getInt("autoExpand.minTime", 300) +
                random.nextInt(config.getInt("autoExpand.maxTime", 600) -
                        config.getInt("autoExpand.minTime", 300) + 1);

        if (!isExpanding) {
            startExpansion(blocks, seconds);
            broadcastExpansionMessage(blocks, seconds);
        }
    }

    private void broadcastExpansionMessage(int blocks, int seconds) {
        String message = ChatColor.translateAlternateColorCodes('&',
                config.getString("notifications.expandMessage",
                                "&6[AcidRain] &c–ì—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–∞ &e{blocks} &c–±–ª–æ–∫–æ–≤ –∑–∞ &e{minutes} &c–º–∏–Ω—É—Ç!")
                        .replace("{blocks}", String.valueOf(blocks))
                        .replace("{minutes}", String.valueOf(seconds/60)));

        Bukkit.getOnlinePlayers().stream()
                .filter(p -> p.hasPermission("acidrain.notify"))
                .forEach(p -> p.sendMessage(message));
    }

    private void startExpansion(int blocks, int seconds) {
        isExpanding = true;
        final int target = zone1Radius + blocks;
        final double increment = (double) blocks / (seconds * 20);

        expansionTask = new BukkitRunnable() {
            double current = zone1Radius;

            @Override
            public void run() {
                current += increment;
                zone1Radius = (int) current;
                calculateZoneRadii();

                if (current >= target) {
                    finishExpansion(target);
                }
            }
        }.runTaskTimer(this, 0L, 1L);
    }

    private void finishExpansion(int target) {
        zone1Radius = target;
        isExpanding = false;
        if (expansionTask != null) {
            expansionTask.cancel();
        }
        savePluginConfig();
    }

    private void cancelTasks() {
        if (expansionTask != null) expansionTask.cancel();
        if (autoExpandTask != null) autoExpandTask.cancel();
    }

    private void savePluginConfig() {
        try {
            config.set("dangerZoneStart", dangerZoneStart);
            config.set("zones.zone1.radius", zone1Radius);
            config.set("acidRainEnabled", acidRainEnabled);
            config.save(configFile);
        } catch (IOException e) {
            getLogger().warning("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: " + e.getMessage());
        }
    }

    private int getZoneForLocation(Location loc) {
        if (loc == null) return 0;
        int distance = Math.max(Math.abs(loc.getBlockX()), Math.abs(loc.getBlockZ()));

        if (distance <= dangerZoneStart) return 0;
        if (distance <= dangerZoneStart + zone1Radius) return 1;
        if (distance <= dangerZoneStart + zone2Radius) return 2;
        if (distance <= dangerZoneStart + zone3Radius) return 3;
        return 4;
    }

    private void handleParticles(Player player) {
        int zone = getZoneForLocation(player.getLocation());
        if (zone > 0 && isUnderOpenSky(player.getLocation())) {
            spawnZoneParticles(player, zone);
        }
    }

    private boolean isUnderOpenSky(Location loc) {
        if (loc == null || loc.getWorld() == null) return false;
        for (int y = loc.getBlockY() + 1; y < 256; y++) {
            Block block = loc.getWorld().getBlockAt(loc.getBlockX(), y, loc.getBlockZ());
            if (!block.isPassable()) {
                return false;
            }
        }
        return true;
    }

    private void spawnZoneParticles(Player player, int zone) {
        Location loc = player.getLocation();
        World world = player.getWorld();
        
        if (world == null) return;

        if (hasFullSuit.getOrDefault(player.getUniqueId(), false) &&
                suitExpirationTimes.containsKey(player.getUniqueId()) &&
                System.currentTimeMillis() < suitExpirationTimes.get(player.getUniqueId())) {
            spawnProtectionParticles(player);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–∏—Å–ª–æ—Ç–Ω–æ–≥–æ –¥–æ–∂–¥—è
        spawnAcidRainEffect(world, loc, zone);

        switch (zone) {
            case 1:
                world.spawnParticle(Particle.FALLING_WATER, loc, 50, 2, 5, 2, 0.1);
                world.spawnParticle(Particle.HAPPY_VILLAGER, loc, 20, 1, 1, 1);
                break;
            case 2:
                world.spawnParticle(Particle.FALLING_LAVA, loc, 40, 2, 5, 2, 0.1);
                world.spawnParticle(Particle.DRIPPING_LAVA, loc, 30, 0.5, 0.5, 0.5);
                world.spawnParticle(Particle.SMOKE, loc, 20, 1, 1, 1);
                break;
            case 3:
                world.spawnParticle(Particle.LAVA, loc, 30, 1, 1, 1);
                world.spawnParticle(Particle.LARGE_SMOKE, loc, 25, 0.5, 0.5, 0.5);
                world.spawnParticle(Particle.DUST, loc, 20, 1, 1, 1, new Particle.DustOptions(Color.RED, 1));
                break;
            case 4:
                world.spawnParticle(Particle.FLAME, loc, 50, 0.5, 0.5, 0.5);
                world.spawnParticle(Particle.LARGE_SMOKE, loc, 40, 1, 1, 1);
                world.spawnParticle(Particle.SQUID_INK, loc, 30, 1, 1, 1);
                break;
        }
    }

    private void spawnAcidRainEffect(World world, Location center, int zone) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∏—Å–ª–æ—Ç–Ω–æ–≥–æ –¥–æ–∂–¥—è
        if (!config.getBoolean("acidRainEffects.enabled", true)) {
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã
        int baseIntensity = config.getInt("acidRainEffects.rainIntensity", 20);
        int rainIntensity = baseIntensity + (zone * 10); // 30, 40, 50, 60 —á–∞—Å—Ç–∏—Ü
        
        double baseRadius = config.getDouble("acidRainEffects.rainRadius", 3.0);
        double radius = baseRadius + (zone * 0.5); // 3.5, 4.0, 4.5, 5.0 –±–ª–æ–∫–æ–≤
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–ø–µ–ª—å –¥–æ–∂–¥—è
        Random random = new Random();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–∏—Å–ª–æ—Ç–Ω—ã–π –¥–æ–∂–¥—å - –ø–∞–¥–∞—é—â–∏–π —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        for (int i = 0; i < rainIntensity; i++) {
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –Ω–µ–±–µ –Ω–∞–¥ –∏–≥—Ä–æ–∫–æ–º
            double x = center.getX() + (random.nextDouble() - 0.5) * radius * 2;
            double z = center.getZ() + (random.nextDouble() - 0.5) * radius * 2;
            double y = center.getY() + 15 + random.nextDouble() * 10; // –í—ã—Å–æ–∫–æ –≤ –Ω–µ–±–µ
            
            Location rainLoc = new Location(world, x, y, z);
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–ø–ª–∏
            Color[] greenColors = {
                Color.LIME,      // –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.GREEN,     // –ó–µ–ª–µ–Ω—ã–π
                Color.fromRGB(0, 128, 0),  // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(50, 205, 50), // –õ–∞–π–º–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(34, 139, 34)  // –õ–µ—Å–Ω–æ–π –∑–µ–ª–µ–Ω—ã–π
            };
            
            Color rainColor = greenColors[random.nextInt(greenColors.length)];
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–¥–∞—é—â—É—é –∫–∞–ø–ª—é –∫–∏—Å–ª–æ—Ç–Ω–æ–≥–æ –¥–æ–∂–¥—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–Ω–∏–∑
            world.spawnParticle(
                Particle.DUST,
                rainLoc,
                1,
                0, -1.0, 0,  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –≤–Ω–∏–∑
                0.2,
                new Particle.DustOptions(rainColor, 0.6f)
            );
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç—É–º–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤ –∑–æ–Ω–µ (–∫–∞–∫ –±—É–¥—Ç–æ –∏–¥–µ—Ç –¥–æ–∂–¥—å, –Ω–æ –±–µ–∑ –∫–∞–ø–µ–ª—å)
        int fogIntensity = rainIntensity * 2; // –ë–æ–ª—å—à–µ —Ç—É–º–∞–Ω–∞ —á–µ–º –¥–æ–∂–¥—è
        for (int i = 0; i < fogIntensity; i++) {
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã—Å–æ—Ç–∞—Ö
            double x = center.getX() + (random.nextDouble() - 0.5) * radius * 3;
            double z = center.getZ() + (random.nextDouble() - 0.5) * radius * 3;
            double y = center.getY() + 1 + random.nextDouble() * 8; // –û—Ç –∑–µ–º–ª–∏ –¥–æ 9 –±–ª–æ–∫–æ–≤ –≤–≤–µ—Ä—Ö
            
            Location fogLoc = new Location(world, x, y, z);
            
            // –°–æ–∑–¥–∞–µ–º —Ç—É–º–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã —Ä–∞–∑–Ω—ã—Ö –∑–µ–ª–µ–Ω—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤
            Color[] fogColors = {
                Color.fromRGB(144, 238, 144), // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(152, 251, 152), // –ë–ª–µ–¥–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(143, 188, 143), // –¢–µ–º–Ω–æ-–º–æ—Ä—Å–∫–æ–π –∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(50, 205, 50),   // –õ–∞–π–º–æ–≤–æ-–∑–µ–ª–µ–Ω—ã–π
                Color.fromRGB(34, 139, 34)    // –õ–µ—Å–Ω–æ–π –∑–µ–ª–µ–Ω—ã–π
            };
            
            Color fogColor = fogColors[random.nextInt(fogColors.length)];
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ —Ç—É–º–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
            world.spawnParticle(
                Particle.DUST,
                fogLoc,
                1,
                0.1, 0.1, 0.1,  // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                0.05,
                new Particle.DustOptions(fogColor, 0.3f)
            );
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∫–∏—Å–ª–æ—Ç–Ω–æ–≥–æ –¥–æ–∂–¥—è (—Ä–µ–¥–∫–æ)
        if (config.getBoolean("acidRainEffects.soundEnabled", true)) {
            int soundChance = config.getInt("acidRainEffects.soundChance", 5);
            if (random.nextInt(100) < soundChance) {
                float volume = 0.3f + (zone * 0.1f); // –ì—Ä–æ–º—á–µ –≤ –±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω–∞—Ö
                float pitch = 0.8f + (random.nextFloat() * 0.4f); // –°–ª—É—á–∞–π–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∑–≤—É–∫–∞
                world.playSound(center, Sound.WEATHER_RAIN, volume, pitch);
            }
        }
    }

    private void spawnProtectionParticles(Player player) {
        World world = player.getWorld();
        if (world == null) return;
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å DustOptions
        world.spawnParticle(
                Particle.DUST,
                player.getLocation().add(0, 2, 0),
                15,
                0.5, 0.5, 0.5,
                0.1,
                new Particle.DustOptions(Color.LIME, 1)
        );

        for (int i = 0; i < 360; i += 30) {
            double angle = Math.toRadians(i);
            double x = Math.cos(angle) * 1.5;
            double z = Math.sin(angle) * 1.5;
            world.spawnParticle(
                    Particle.HAPPY_VILLAGER,
                    player.getLocation().add(x, 1.5, z),
                    1,
                    0, 0, 0,
                    0
            );
        }
    }

    private void updateArmorLore(Player player) {
        UUID playerId = player.getUniqueId();
        Long expireTime = suitExpirationTimes.get(playerId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã
        if (expireTime == null) {
            return;
        }

        ItemStack[] armor = player.getInventory().getArmorContents();
        if (armor == null) return;

        for (ItemStack item : armor) {
            if (item != null && item.hasItemMeta()) {
                ItemMeta meta = item.getItemMeta();
                if (meta != null) {
                    PersistentDataContainer data = meta.getPersistentDataContainer();

                    if (data.has(new NamespacedKey(this, "acidrain_protection"), PersistentDataType.INTEGER)) {
                        List<String> lore = meta.getLore();
                        if (lore != null && lore.size() >= 3) {
                            lore.set(2, ChatColor.YELLOW + "–û—Å—Ç–∞–ª–æ—Å—å: " + getRemainingTimeForDisplay(expireTime));
                            meta.setLore(lore);
                            item.setItemMeta(meta);
                        }
                    }
                }
            }
        }
    }

    private void checkSuitAndEffects(Player player) {
        boolean wearingFullSuit = checkFullSuit(player);
        UUID playerId = player.getUniqueId();

        if (!wearingFullSuit && hasFullSuit.getOrDefault(playerId, false)) {
            // –ò–≥—Ä–æ–∫ —Å–Ω—è–ª –∫–æ—Å—Ç—é–º - —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
            pauseProtectionTimer(player);
            return;
        }

        if (wearingFullSuit) {
            Long expireTime = suitExpirationTimes.get(playerId);

            if (expireTime == null) {
                startProtectionTimer(player);
                return;
            }

            if (System.currentTimeMillis() >= expireTime) {
                damageSuit(player);
                return;
            }

            updateArmorLore(player);
        }

        int zone = getZoneForLocation(player.getLocation());
        if (zone > 0) {
            boolean protectionActive = wearingFullSuit &&
                    suitExpirationTimes.containsKey(playerId) &&
                    System.currentTimeMillis() < suitExpirationTimes.get(playerId);

            if (protectionActive) {
                spawnProtectionParticles(player);
            } else {
                applyZoneEffects(player, zone);
            }
        }
    }

    private boolean checkFullSuit(Player player) {
        ItemStack[] armor = player.getInventory().getArmorContents();
        if (armor == null || armor.length < 4) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –±—Ä–æ–Ω–∏
        for (ItemStack item : armor) {
            if (item == null || !item.hasItemMeta()) return false;

            ItemMeta meta = item.getItemMeta();
            if (meta == null) return false;

            PersistentDataContainer data = meta.getPersistentDataContainer();
            if (!data.has(new NamespacedKey(this, "acidrain_protection"), PersistentDataType.INTEGER)) {
                return false;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        hasFullSuit.put(player.getUniqueId(), true);
        return true;
    }

    private void updateSuitTimers() {
        for (Player player : Bukkit.getOnlinePlayers()) {
            UUID playerId = player.getUniqueId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç–æ–π (–Ω–µ –Ω–∞ –ø–∞—É–∑–µ)
            if (hasFullSuit.getOrDefault(playerId, false) &&
                    suitExpirationTimes.containsKey(playerId) &&
                    !suitPauseTimes.containsKey(playerId)) {

                long expireTime = suitExpirationTimes.get(playerId);
                if (System.currentTimeMillis() >= expireTime) {
                    damageSuit(player);
                } else {
                    updateArmorLore(player);
                }
            }
        }
    }

    private void startProtectionTimer(Player player) {
        long duration = config.getInt("protectionSuit.duration", 60) * 60000L;
        suitExpirationTimes.put(player.getUniqueId(), System.currentTimeMillis() + duration);
        hasFullSuit.put(player.getUniqueId(), true);
        suitPauseTimes.remove(player.getUniqueId()); // –£–±–∏—Ä–∞–µ–º –ø–∞—É–∑—É
        updateArmorLore(player);

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏
        clearRadiationEffects(player);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        player.sendMessage(ChatColor.GREEN + "–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ " +
                config.getInt("protectionSuit.duration", 60) + " –º–∏–Ω—É—Ç");
        player.sendMessage(ChatColor.GREEN + "–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!");
    }

    private void pauseProtectionTimer(Player player) {
        UUID playerId = player.getUniqueId();
        hasFullSuit.put(playerId, false);
        suitPauseTimes.put(playerId, System.currentTimeMillis());
        player.sendMessage(ChatColor.YELLOW + "–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º —Å–Ω—è—Ç. –¢–∞–π–º–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.");
    }

    private void resumeProtectionTimer(Player player) {
        UUID playerId = player.getUniqueId();
        Long pauseTime = suitPauseTimes.get(playerId);
        
        if (pauseTime != null) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –Ω–∞ –ø–∞—É–∑–µ
            long pauseDuration = System.currentTimeMillis() - pauseTime;
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
            Long currentExpireTime = suitExpirationTimes.get(playerId);
            if (currentExpireTime != null) {
                suitExpirationTimes.put(playerId, currentExpireTime + pauseDuration);
            }
            suitPauseTimes.remove(playerId);
        }
        
        hasFullSuit.put(playerId, true);
        updateArmorLore(player);
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏
        clearRadiationEffects(player);
        
        player.sendMessage(ChatColor.GREEN + "–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
        player.sendMessage(ChatColor.GREEN + "–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!");
    }

    private void damageSuit(Player player) {
        UUID playerId = player.getUniqueId();

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫–ª–æ
        if (suitExpirationTimes.containsKey(playerId) &&
                System.currentTimeMillis() >= suitExpirationTimes.get(playerId)) {

            for (ItemStack item : player.getInventory().getArmorContents()) {
                if (item != null && item.hasItemMeta()) {
                    ItemMeta meta = item.getItemMeta();
                    if (meta != null && meta.getPersistentDataContainer().has(
                            new NamespacedKey(this, "acidrain_protection"),
                            PersistentDataType.INTEGER)) {
                        item.setAmount(0);
                    }
                }
            }

            suitExpirationTimes.remove(playerId);
            hasFullSuit.remove(playerId);
            World world = player.getWorld();
            if (world != null) {
                player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1.0f, 1.0f);
            }
            player.sendMessage(ChatColor.RED + "–í–∞—à –∑–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º —Ä–∞–∑—Ä—É—à–µ–Ω –∫–∏—Å–ª–æ—Ç–Ω—ã–º –¥–æ–∂–¥–µ–º!");
        }
    }

    private String getRemainingTimeForDisplay(long expireTime) {
        long remaining = expireTime - System.currentTimeMillis();
        if (remaining <= 0) return "–ò—Å—Ç–µ–∫–ª–æ";
        long minutes = remaining / 60000;
        long seconds = (remaining % 60000) / 1000;
        return String.format("%d –º–∏–Ω. %d —Å–µ–∫.", minutes, seconds);
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (event.getWhoClicked() instanceof Player) {
            new BukkitRunnable() {
                @Override
                public void run() {
                    Player player = (Player) event.getWhoClicked();
                    boolean wasWearing = hasFullSuit.getOrDefault(player.getUniqueId(), false);
                    boolean nowWearing = checkFullSuit(player);

                    if (nowWearing && !wasWearing) {
                        // –ò–≥—Ä–æ–∫ –Ω–∞–¥–µ–ª –ø–æ–ª–Ω—ã–π –∫–æ—Å—Ç—é–º
                        if (!suitExpirationTimes.containsKey(player.getUniqueId())) {
                            // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                            startProtectionTimer(player);
                        } else {
                            // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –µ—Å—Ç—å - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–∞—É–∑—ã
                            resumeProtectionTimer(player);
                        }
                    } else if (!nowWearing && wasWearing) {
                        // –ò–≥—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–Ω—è–ª –∫–æ—Å—Ç—é–º - —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
                        pauseProtectionTimer(player);
                    }
                }
            }.runTaskLater(this, 1L);
        }
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
            ItemStack item = event.getItem();
            if (item != null && item.hasItemMeta()) {
                ItemMeta meta = item.getItemMeta();
                if (meta != null) {
                    PersistentDataContainer data = meta.getPersistentDataContainer();

                    if (data.has(new NamespacedKey(this, "full_protection_set"), PersistentDataType.INTEGER)) {
                        event.setCancelled(true);

                        Player player = event.getPlayer();
                        if (player.getInventory().firstEmpty() == -1) {
                            player.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
                            return;
                        }

                        ItemStack helmet = createArmorPiece(Material.LEATHER_HELMET, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–π —à–ª–µ–º");
                        ItemStack chestplate = createArmorPiece(Material.LEATHER_CHESTPLATE, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∞—è –∫–∏—Ä–∞—Å–∞");
                        ItemStack leggings = createArmorPiece(Material.LEATHER_LEGGINGS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –ø–æ–Ω–æ–∂–∏");
                        ItemStack boots = createArmorPiece(Material.LEATHER_BOOTS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –±–æ—Ç–∏–Ω–∫–∏");

                        String[] colorParts = config.getString("protectionSuit.color", "50,200,50").split(",");
                        Color color = Color.fromRGB(
                                Integer.parseInt(colorParts[0].trim()),
                                Integer.parseInt(colorParts[1].trim()),
                                Integer.parseInt(colorParts[2].trim())
                        );

                        setArmorColor(helmet, color);
                        setArmorColor(chestplate, color);
                        setArmorColor(leggings, color);
                        setArmorColor(boots, color);

                        player.getInventory().addItem(helmet, chestplate, leggings, boots);
                        item.setAmount(item.getAmount() - 1);
                        
                        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Å—Ç—é–º–∞
                        clearRadiationEffects(player);
                        
                        player.sendMessage(ChatColor.GREEN + "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∑–∞—â–∏—Ç–Ω–æ–π –±—Ä–æ–Ω–∏!");
                        player.sendMessage(ChatColor.GREEN + "–í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!");
                    }
                }
            }
        }
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        if (suitExpirationTimes.containsKey(player.getUniqueId())) {
            if (System.currentTimeMillis() >= suitExpirationTimes.get(player.getUniqueId())) {
                suitExpirationTimes.remove(player.getUniqueId());
                hasFullSuit.remove(player.getUniqueId());
            } else {
                updateArmorLore(player);
            }
        }
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        if (!acidRainEnabled) return;

        Location to = event.getTo();
        if (to == null || event.getFrom().getBlock().equals(to.getBlock())) return;

        Player player = event.getPlayer();
        int zone = getZoneForLocation(player.getLocation());
        Integer oldZone = currentZone.get(player.getUniqueId());

        if (oldZone == null || oldZone != zone) {
            currentZone.put(player.getUniqueId(), zone);
            if (zone == 0) {
                player.sendActionBar(ChatColor.GREEN + "‚ñ† –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ ‚ñ†");
                clearEffects(player);
            } else {
                player.sendActionBar(ChatColor.RED + "‚ñ† –ö–∏—Å–ª–æ—Ç–Ω–∞—è –∑–æ–Ω–∞ ‚ñ† –£—Ä–æ–≤–µ–Ω—å " + zone);
            }
        }
    }

    private void applyZoneEffects(Player player, int zone) {
        long now = System.currentTimeMillis();
        if (now - lastEffectTime.getOrDefault(player.getUniqueId(), 0L) < 20000) {
            return;
        }

        clearEffects(player);

        World world = player.getWorld();
        if (world != null) {
            switch (zone) {
                case 1:
                    player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, 200, 0));
                    world.playSound(player.getLocation(), Sound.ENTITY_PLAYER_HURT, 1.0f, 1.0f);
                    break;
                case 2:
                    player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, 200, 1));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 200, 1));
                    world.playSound(player.getLocation(), Sound.ENTITY_PLAYER_HURT, 1.0f, 0.8f);
                    break;
                case 3:
                    player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, 200, 3));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 200, 3));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 200, 3));
                    world.playSound(player.getLocation(), Sound.ENTITY_PLAYER_HURT, 1.0f, 0.6f);
                    break;
                case 4:
                    player.addPotionEffect(new PotionEffect(PotionEffectType.POISON, 200, 9));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 200, 9));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 200, 9));
                    player.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, 200, 9));
                    world.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_GROWL, 0.5f, 1.0f);
                    break;
            }
        }

        player.damage(zone * 0.5);
        lastEffectTime.put(player.getUniqueId(), now);
    }

    private void clearEffects(Player player) {
        for (PotionEffect effect : player.getActivePotionEffects()) {
            player.removePotionEffect(effect.getType());
        }
    }

    private void clearRadiationEffects(Player player) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–¥–∏–∞—Ü–∏–∏
        player.removePotionEffect(PotionEffectType.POISON);
        player.removePotionEffect(PotionEffectType.SLOWNESS);
        player.removePotionEffect(PotionEffectType.BLINDNESS);
        player.removePotionEffect(PotionEffectType.WITHER);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ä–µ–º–µ–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        lastEffectTime.remove(player.getUniqueId());
        currentZone.remove(player.getUniqueId());
        

    }

    private void giveProtectionSuit(Player player) {
        ItemStack helmet = createArmorPiece(Material.LEATHER_HELMET, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–π —à–ª–µ–º");
        ItemStack chestplate = createArmorPiece(Material.LEATHER_CHESTPLATE, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∞—è –∫–∏—Ä–∞—Å–∞");
        ItemStack leggings = createArmorPiece(Material.LEATHER_LEGGINGS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –ø–æ–Ω–æ–∂–∏");
        ItemStack boots = createArmorPiece(Material.LEATHER_BOOTS, "–ö–∏—Å–ª–æ—Ç–æ—Å—Ç–æ–π–∫–∏–µ –±–æ—Ç–∏–Ω–∫–∏");

        String[] colorParts = config.getString("protectionSuit.color", "50,200,50").split(",");
        Color color = Color.fromRGB(
                Integer.parseInt(colorParts[0].trim()),
                Integer.parseInt(colorParts[1].trim()),
                Integer.parseInt(colorParts[2].trim())
        );

        setArmorColor(helmet, color);
        setArmorColor(chestplate, color);
        setArmorColor(leggings, color);
        setArmorColor(boots, color);

        player.getInventory().addItem(helmet, chestplate, leggings, boots);
    }

    private ItemStack createArmorPiece(Material material, String name) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(ChatColor.GREEN + name);

            meta.getPersistentDataContainer().set(
                    new NamespacedKey(this, "acidrain_protection"),
                    PersistentDataType.INTEGER,
                    1
            );

            List<String> lore = new ArrayList<>();
            lore.add(ChatColor.GRAY + "–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –∫–∏—Å–ª–æ—Ç–Ω—ã—Ö –¥–æ–∂–¥–µ–π");
            lore.add(ChatColor.GRAY + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + config.getInt("protectionSuit.duration", 60) + " –º–∏–Ω—É—Ç");
            lore.add(ChatColor.YELLOW + "–û—Å—Ç–∞–ª–æ—Å—å: " + getRemainingTimeForDisplay(
                    System.currentTimeMillis() + config.getInt("protectionSuit.duration", 60) * 60000L));
            meta.setLore(lore);

            meta.addItemFlags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_UNBREAKABLE);
            meta.setUnbreakable(true);

            item.setItemMeta(meta);
        }
        return item;
    }

    private void setArmorColor(ItemStack item, Color color) {
        if (item.getItemMeta() instanceof LeatherArmorMeta) {
            LeatherArmorMeta meta = (LeatherArmorMeta) item.getItemMeta();
            meta.setColor(color);
            item.setItemMeta(meta);
        }
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        String command = cmd.getName().toLowerCase();

        if (command.equals("asuit")) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤!");
                return true;
            }
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            giveProtectionSuit((Player)sender);
            return true;
        }

        if (command.equals("aon")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            acidRainEnabled = true;
            sender.sendMessage(ChatColor.GREEN + "–ö–∏—Å–ª–æ—Ç–Ω—ã–µ –¥–æ–∂–¥–∏ –≤–∫–ª—é—á–µ–Ω—ã!");
            return true;
        }

        if (command.equals("aoff")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            acidRainEnabled = false;
            sender.sendMessage(ChatColor.GREEN + "–ö–∏—Å–ª–æ—Ç–Ω—ã–µ –¥–æ–∂–¥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!");
            return true;
        }

        if (command.equals("astatus")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            
            sender.sendMessage(ChatColor.GOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            sender.sendMessage(ChatColor.GOLD + "‚ïë           " + ChatColor.WHITE + "–°–¢–ê–¢–£–° ACIDRAIN" + ChatColor.GOLD + "           ‚ïë");
            sender.sendMessage(ChatColor.GOLD + "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            
            // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "–°–∏—Å—Ç–µ–º–∞: " + 
                    (acidRainEnabled ? ChatColor.GREEN + "‚óè –ê–ö–¢–ò–í–ù–ê" : ChatColor.RED + "‚óè –û–¢–ö–õ–Æ–ß–ï–ù–ê") + 
                    ChatColor.GOLD + " ‚ïë");
            
            // –°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if (isExpanding) {
                sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: " + ChatColor.YELLOW + "‚óè –í –ü–†–û–¶–ï–°–°–ï" + ChatColor.GOLD + " ‚ïë");
            } else {
                sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: " + ChatColor.GREEN + "‚óè –°–¢–ê–ë–ò–õ–¨–ù–û" + ChatColor.GOLD + " ‚ïë");
            }
            
            sender.sendMessage(ChatColor.GOLD + "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "–ì–†–ê–ù–ò–¶–´ –û–ü–ê–°–ù–´–• –ó–û–ù:" + ChatColor.GOLD + " ‚ïë");
            sender.sendMessage(ChatColor.GOLD + "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            
            // –ó–æ–Ω—ã —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.GREEN + "üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞: " + 
                    ChatColor.WHITE + "0 - " + dangerZoneStart + " –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
            
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.YELLOW + "‚ö†Ô∏è  –ó–æ–Ω–∞ 1 (—Å–ª–∞–±–∞—è): " + 
                    ChatColor.WHITE + dangerZoneStart + " - " + (dangerZoneStart + zone1Radius) + " –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
            
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.GOLD + "‚ö° –ó–æ–Ω–∞ 2 (—Å—Ä–µ–¥–Ω—è—è): " + 
                    ChatColor.WHITE + (dangerZoneStart + zone1Radius) + " - " + (dangerZoneStart + zone2Radius) + " –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
            
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.RED + "üî• –ó–æ–Ω–∞ 3 (—Å–∏–ª—å–Ω–∞—è): " + 
                    ChatColor.WHITE + (dangerZoneStart + zone2Radius) + " - " + (dangerZoneStart + zone3Radius) + " –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
            
            sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.DARK_RED + "üíÄ –ó–æ–Ω–∞ 4 (—Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è): " + 
                    ChatColor.WHITE + (dangerZoneStart + zone3Radius) + "+ –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
            
            sender.sendMessage(ChatColor.GOLD + "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (sender instanceof Player) {
                Player player = (Player) sender;
                int currentZone = getZoneForLocation(player.getLocation());
                int distance = (int) player.getLocation().distance(new Location(player.getWorld(), 0, player.getLocation().getY(), 0));
                
                sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:" + ChatColor.GOLD + " ‚ïë");
                sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + 
                        ChatColor.YELLOW + distance + " –±–ª–æ–∫–æ–≤" + ChatColor.GOLD + " ‚ïë");
                
                String zoneName;
                ChatColor zoneColor;
                switch (currentZone) {
                    case 0:
                        zoneName = "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞";
                        zoneColor = ChatColor.GREEN;
                        break;
                    case 1:
                        zoneName = "–ó–æ–Ω–∞ 1 (—Å–ª–∞–±–∞—è)";
                        zoneColor = ChatColor.YELLOW;
                        break;
                    case 2:
                        zoneName = "–ó–æ–Ω–∞ 2 (—Å—Ä–µ–¥–Ω—è—è)";
                        zoneColor = ChatColor.GOLD;
                        break;
                    case 3:
                        zoneName = "–ó–æ–Ω–∞ 3 (—Å–∏–ª—å–Ω–∞—è)";
                        zoneColor = ChatColor.RED;
                        break;
                    case 4:
                        zoneName = "–ó–æ–Ω–∞ 4 (—Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è)";
                        zoneColor = ChatColor.DARK_RED;
                        break;
                    default:
                        zoneName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                        zoneColor = ChatColor.GRAY;
                }
                
                sender.sendMessage(ChatColor.GOLD + "‚ïë " + ChatColor.WHITE + "  –¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞: " + 
                        zoneColor + zoneName + ChatColor.GOLD + " ‚ïë");
            }
            
            sender.sendMessage(ChatColor.GOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            return true;
        }

        if (command.equals("aexpand")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            if (args.length < 2) {
                sender.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /aexpand <–±–ª–æ–∫–∏> <–º–∏–Ω—É—Ç—ã>");
                sender.sendMessage(ChatColor.YELLOW + "–ü—Ä–∏–º–µ—Ä: /aexpand 200 5 (—Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ 200 –±–ª–æ–∫–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç)");
                return true;
            }
            try {
                int blocks = Integer.parseInt(args[0]);
                int minutes = Integer.parseInt(args[1]);
                int seconds = minutes * 60; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                startExpansion(blocks, seconds);
                sender.sendMessage(ChatColor.GREEN + "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: +" + blocks + " –±–ª–æ–∫–æ–≤ –∑–∞ " + minutes + " –º–∏–Ω—É—Ç");
            } catch (NumberFormatException e) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!");
                sender.sendMessage(ChatColor.YELLOW + "–ü—Ä–∏–º–µ—Ä: /aexpand 200 5");
            }
            return true;
        }

        if (command.equals("aset")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            if (args.length < 1) {
                sender.sendMessage(ChatColor.RED + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /aset <–±–ª–æ–∫–∏>");
                sender.sendMessage(ChatColor.YELLOW + "–ü—Ä–∏–º–µ—Ä: /aset 2000 (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ 2000 –±–ª–æ–∫–æ–≤)");
                return true;
            }
            try {
                dangerZoneStart = Integer.parseInt(args[0]);
                savePluginConfig();
                sender.sendMessage(ChatColor.GREEN + "–ì—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ " + dangerZoneStart + " –±–ª–æ–∫–æ–≤");
            } catch (NumberFormatException e) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
                sender.sendMessage(ChatColor.YELLOW + "–ü—Ä–∏–º–µ—Ä: /aset 2000");
            }
            return true;
        }

        if (command.equals("arecipes")) {
            if (!sender.hasPermission("acidrain.admin")) {
                sender.sendMessage(ChatColor.RED + "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
                return true;
            }
            sender.sendMessage(ChatColor.GOLD + "=== –†–µ—Ü–µ–ø—Ç—ã AcidRain ===");
            sender.sendMessage(ChatColor.YELLOW + "–®–ª–µ–º: LLL, L L (L = –∫–æ–∂–∞)");
            sender.sendMessage(ChatColor.YELLOW + "–ö–∏—Ä–∞—Å–∞: L L, LLL, LLL (L = –∫–æ–∂–∞)");
            sender.sendMessage(ChatColor.YELLOW + "–ü–æ–Ω–æ–∂–∏: LLL, L L, L L (L = –∫–æ–∂–∞)");
            sender.sendMessage(ChatColor.YELLOW + "–ë–æ—Ç–∏–Ω–∫–∏: L L, L L (L = –∫–æ–∂–∞)");
            sender.sendMessage(ChatColor.GREEN + "–ü–æ–ª–Ω—ã–π –∫–æ—Å—Ç—é–º:");
            sender.sendMessage(ChatColor.GREEN + "NBT");
            sender.sendMessage(ChatColor.GREEN + "VEV");
            sender.sendMessage(ChatColor.GREEN + "LBL");
            sender.sendMessage(ChatColor.AQUA + "N = –ó–≤–µ–∑–¥–∞ –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞, B = –°—Ç–µ—Ä–∂–µ–Ω—å –±—Ä–∏–∑–∞, T = –¢–æ—Ç–µ–º –±–µ—Å—Å–º–µ—Ä—Ç–∏—è");
            sender.sendMessage(ChatColor.AQUA + "V = –ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º, E = –ö–æ–∂–∞–Ω–∞—è –∫–∏—Ä–∞—Å–∞, L = –ö–æ–∂–∞–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏");
            return true;
        }

        if (command.equals("atime")) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤!");
                return true;
            }
            Player player = (Player) sender;
            UUID playerId = player.getUniqueId();
            
            if (suitExpirationTimes.containsKey(playerId)) {
                long expireTime = suitExpirationTimes.get(playerId);
                long remaining = expireTime - System.currentTimeMillis();
                
                if (remaining > 0) {
                    long minutes = remaining / 60000;
                    long seconds = (remaining % 60000) / 1000;
                    boolean isWearing = hasFullSuit.getOrDefault(playerId, false);
                    boolean isPaused = suitPauseTimes.containsKey(playerId);
                    
                    if (isWearing && !isPaused) {
                        sender.sendMessage(ChatColor.GREEN + "–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –∞–∫—Ç–∏–≤–µ–Ω!");
                        sender.sendMessage(ChatColor.YELLOW + "–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: " + minutes + " –º–∏–Ω. " + seconds + " —Å–µ–∫.");
                    } else {
                        sender.sendMessage(ChatColor.YELLOW + "–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –Ω–∞ –ø–∞—É–∑–µ!");
                        sender.sendMessage(ChatColor.YELLOW + "–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: " + minutes + " –º–∏–Ω. " + seconds + " —Å–µ–∫.");
                    }
                } else {
                    sender.sendMessage(ChatColor.RED + "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Å—Ç—é–º–∞ –∏—Å—Ç–µ–∫–ª–æ!");
                }
            } else {
                sender.sendMessage(ChatColor.GRAY + "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞.");
            }
            return true;
        }

        if (command.equals("acidrain")) {
            sender.sendMessage(ChatColor.GOLD + "===== AcidRain v1.0b =====");
            sender.sendMessage(ChatColor.AQUA + "–ì—Ä–∞–Ω–∏—Ü–∞: " + ChatColor.GREEN + dangerZoneStart + ChatColor.AQUA + " –±–ª–æ–∫–æ–≤");
            sender.sendMessage("");
            sender.sendMessage(ChatColor.YELLOW + "–ö–æ–º–∞–Ω–¥—ã:");
            sender.sendMessage(ChatColor.GREEN + "/asuit" + ChatColor.WHITE + " - –ü–æ–ª—É—á–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º");
            sender.sendMessage(ChatColor.GREEN + "/aon" + ChatColor.WHITE + " - –í–∫–ª—é—á–∏—Ç—å –∫–∏—Å–ª–æ—Ç–Ω—ã–µ –¥–æ–∂–¥–∏");
            sender.sendMessage(ChatColor.GREEN + "/aoff" + ChatColor.WHITE + " - –í—ã–∫–ª—é—á–∏—Ç—å –∫–∏—Å–ª–æ—Ç–Ω—ã–µ –¥–æ–∂–¥–∏");
            sender.sendMessage(ChatColor.GREEN + "/astatus" + ChatColor.WHITE + " - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã");
            sender.sendMessage(ChatColor.GREEN + "/aexpand <–±–ª–æ–∫–∏> <–º–∏–Ω—É—Ç—ã>" + ChatColor.WHITE + " - –†–∞—Å—à–∏—Ä–∏—Ç—å –∑–æ–Ω—É");
            sender.sendMessage(ChatColor.GREEN + "/aset <–±–ª–æ–∫–∏>" + ChatColor.WHITE + " - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É");
            sender.sendMessage(ChatColor.GREEN + "/arecipes" + ChatColor.WHITE + " - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã");
            sender.sendMessage(ChatColor.GREEN + "/atime" + ChatColor.WHITE + " - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∫–æ—Å—Ç—é–º–∞");
            sender.sendMessage("");
            sender.sendMessage(ChatColor.YELLOW + "Discord: " + ChatColor.BLUE + "https://discord.gg/gV2KmUbqXC");
            return true;
        }

        return false;
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, Command cmd, String alias, String[] args) {
        List<String> completions = new ArrayList<>();
        
        if (args.length == 1) {
            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /acidrain
            if (cmd.getName().equalsIgnoreCase("acidrain")) {
                completions.add("status");
                completions.add("on");
                completions.add("off");
                completions.add("set");
                completions.add("expand");
                completions.add("suit");
                completions.add("recipes");
            }
        } else if (args.length == 2) {
            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /aexpand (–±–ª–æ–∫–∏)
            if (cmd.getName().equalsIgnoreCase("aexpand")) {
                completions.add("50");
                completions.add("100");
                completions.add("200");
                completions.add("300");
                completions.add("500");
            }
            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /aset
            else if (cmd.getName().equalsIgnoreCase("aset")) {
                completions.add("1000");
                completions.add("2000");
                completions.add("3000");
                completions.add("4000");
                completions.add("5000");
            }
        } else if (args.length == 3) {
            // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ /aexpand (–º–∏–Ω—É—Ç—ã)
            if (cmd.getName().equalsIgnoreCase("aexpand")) {
                completions.add("1");
                completions.add("2");
                completions.add("5");
                completions.add("10");
                completions.add("15");
            }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        String input = args[args.length - 1].toLowerCase();
        completions.removeIf(s -> !s.toLowerCase().startsWith(input));
        
        return completions;
    }
}
